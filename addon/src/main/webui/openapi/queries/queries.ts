// generated with @7nohe/openapi-react-query-codegen@2.0.0-beta.3 

import { type Options } from "@hey-api/client-fetch";
import { useMutation, UseMutationOptions, useQuery, UseQueryOptions } from "@tanstack/react-query";
import { getApiDevices, getApiLogs, getApiLogsUnified, getApiOverview, postApiOverviewCheckByIdDisable, postApiOverviewCheckByIdEnable, postApiOverviewGenerate } from "../requests/services.gen";
import { GetApiDevicesError, GetApiLogsError, GetApiLogsUnifiedError, GetApiOverviewError, PostApiOverviewCheckByIdDisableData, PostApiOverviewCheckByIdDisableError, PostApiOverviewCheckByIdEnableData, PostApiOverviewCheckByIdEnableError, PostApiOverviewGenerateError } from "../requests/types.gen";
import * as Common from "./common";
export const useGetApiDevices = <TData = Common.GetApiDevicesDefaultResponse, TError = GetApiDevicesError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<unknown, true> = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useQuery<TData, TError>({ queryKey: Common.UseGetApiDevicesKeyFn(clientOptions, queryKey), queryFn: () => getApiDevices({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useGetApiLogs = <TData = Common.GetApiLogsDefaultResponse, TError = GetApiLogsError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<unknown, true> = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useQuery<TData, TError>({ queryKey: Common.UseGetApiLogsKeyFn(clientOptions, queryKey), queryFn: () => getApiLogs({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useGetApiLogsUnified = <TData = Common.GetApiLogsUnifiedDefaultResponse, TError = GetApiLogsUnifiedError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<unknown, true> = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useQuery<TData, TError>({ queryKey: Common.UseGetApiLogsUnifiedKeyFn(clientOptions, queryKey), queryFn: () => getApiLogsUnified({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useGetApiOverview = <TData = Common.GetApiOverviewDefaultResponse, TError = GetApiOverviewError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<unknown, true> = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useQuery<TData, TError>({ queryKey: Common.UseGetApiOverviewKeyFn(clientOptions, queryKey), queryFn: () => getApiOverview({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const usePostApiOverviewCheckByIdDisable = <TData = Common.PostApiOverviewCheckByIdDisableMutationResult, TError = PostApiOverviewCheckByIdDisableError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<PostApiOverviewCheckByIdDisableData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<PostApiOverviewCheckByIdDisableData, true>, TContext>({ mutationKey: Common.UsePostApiOverviewCheckByIdDisableKeyFn(mutationKey), mutationFn: clientOptions => postApiOverviewCheckByIdDisable(clientOptions) as unknown as Promise<TData>, ...options });
export const usePostApiOverviewCheckByIdEnable = <TData = Common.PostApiOverviewCheckByIdEnableMutationResult, TError = PostApiOverviewCheckByIdEnableError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<PostApiOverviewCheckByIdEnableData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<PostApiOverviewCheckByIdEnableData, true>, TContext>({ mutationKey: Common.UsePostApiOverviewCheckByIdEnableKeyFn(mutationKey), mutationFn: clientOptions => postApiOverviewCheckByIdEnable(clientOptions) as unknown as Promise<TData>, ...options });
export const usePostApiOverviewGenerate = <TData = Common.PostApiOverviewGenerateMutationResult, TError = PostApiOverviewGenerateError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<unknown, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<unknown, true>, TContext>({ mutationKey: Common.UsePostApiOverviewGenerateKeyFn(mutationKey), mutationFn: clientOptions => postApiOverviewGenerate(clientOptions) as unknown as Promise<TData>, ...options });
