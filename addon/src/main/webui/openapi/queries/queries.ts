// generated with @7nohe/openapi-react-query-codegen@2.0.0-beta.3 

import { type Options } from "@hey-api/client-fetch";
import { useMutation, UseMutationOptions, useQuery, UseQueryOptions } from "@tanstack/react-query";
import { getApiReport, postApiCheckByIdDisable, postApiCheckByIdEnable, postApiReportGenerate } from "../requests/services.gen";
import { GetApiReportError, PostApiCheckByIdDisableData, PostApiCheckByIdDisableError, PostApiCheckByIdEnableData, PostApiCheckByIdEnableError, PostApiReportGenerateError } from "../requests/types.gen";
import * as Common from "./common";
export const useGetApiReport = <TData = Common.GetApiReportDefaultResponse, TError = GetApiReportError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<unknown, true> = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useQuery<TData, TError>({ queryKey: Common.UseGetApiReportKeyFn(clientOptions, queryKey), queryFn: () => getApiReport({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const usePostApiCheckByIdDisable = <TData = Common.PostApiCheckByIdDisableMutationResult, TError = PostApiCheckByIdDisableError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<PostApiCheckByIdDisableData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<PostApiCheckByIdDisableData, true>, TContext>({ mutationKey: Common.UsePostApiCheckByIdDisableKeyFn(mutationKey), mutationFn: clientOptions => postApiCheckByIdDisable(clientOptions) as unknown as Promise<TData>, ...options });
export const usePostApiCheckByIdEnable = <TData = Common.PostApiCheckByIdEnableMutationResult, TError = PostApiCheckByIdEnableError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<PostApiCheckByIdEnableData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<PostApiCheckByIdEnableData, true>, TContext>({ mutationKey: Common.UsePostApiCheckByIdEnableKeyFn(mutationKey), mutationFn: clientOptions => postApiCheckByIdEnable(clientOptions) as unknown as Promise<TData>, ...options });
export const usePostApiReportGenerate = <TData = Common.PostApiReportGenerateMutationResult, TError = PostApiReportGenerateError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<unknown, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<unknown, true>, TContext>({ mutationKey: Common.UsePostApiReportGenerateKeyFn(mutationKey), mutationFn: clientOptions => postApiReportGenerate(clientOptions) as unknown as Promise<TData>, ...options });
