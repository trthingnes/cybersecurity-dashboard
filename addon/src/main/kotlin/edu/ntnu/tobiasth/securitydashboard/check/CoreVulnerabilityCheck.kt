package edu.ntnu.tobiasth.securitydashboard.check

import edu.ntnu.tobiasth.securitydashboard.client.dto.github.RepositorySecurityAdvisories
import edu.ntnu.tobiasth.securitydashboard.service.GitHubService
import edu.ntnu.tobiasth.securitydashboard.service.HomeAssistantService
import edu.ntnu.tobiasth.securitydashboard.service.dto.CheckResult
import edu.ntnu.tobiasth.securitydashboard.service.dto.Risk
import edu.ntnu.tobiasth.securitydashboard.util.VersionComparator
import jakarta.enterprise.context.ApplicationScoped

@ApplicationScoped
class CoreVulnerabilityCheck(
    val homeAssistantService: HomeAssistantService,
    val githubService: GitHubService
) : Check {
    override val name: String
        get() = "Core Vulnerabilities"
    override val description: String
        get() = "Home Assistant Core does not have unpatched vulnerabilities reported in security advisories."

    override fun run(): CheckResult {
        val coreVersion = homeAssistantService.getCoreInfo().version
        val advisories = githubService.getSecurityAdvisories("home-assistant", "core")
            .filter { it.cveId != null }
            .filter { a ->
                a.vulnerabilities.any { v ->
                    try {
                        v.image.ecosystem == "Home Assistant Core" && v.patchedVersions != null && VersionComparator.isOlderThan(
                            coreVersion,
                            v.patchedVersions
                        )
                    } catch (e: NumberFormatException) {
                        false // Ignore any patched versions that are non-numeric.
                    }
                }
            }

        if (advisories.isEmpty()) {
            return result(Risk.LOW, "Home Assistant Core $coreVersion has no reported vulnerabilities.")
        }

        val risk = if (advisories.any {
                it.severity == RepositorySecurityAdvisories.Severity.CRITICAL || it.severity == RepositorySecurityAdvisories.Severity.HIGH
            }) Risk.HIGH else Risk.MODERATE

        val highestPatchedVersion = advisories
            .flatMap { it.vulnerabilities }
            .mapNotNull { it.patchedVersions }
            .sortedWith(VersionComparator)
            .last()

        return result(
            risk,
            "Found unpatched vulnerabilities (${advisories.joinToString { it.cveId!! }}). Please update to Home Assistant Core $highestPatchedVersion."
        )
    }

}